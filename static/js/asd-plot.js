// Generated by CoffeeScript 1.6.2
(function() {
  var Plot, console, d3, describe, dualPlot, frequencies, handleError, isEmpty, loadFrequencies, mergeObj, refreshAmplitudes,
    __slice = [].slice;

  d3 = this.d3;

  console = this.console;

  describe = function(obj, attrs) {
    var attr, value;

    for (attr in attrs) {
      value = attrs[attr];
      obj = obj.attr(attr, value);
    }
    return obj;
  };

  mergeObj = function(base, newObj) {
    var key, value;

    if (base == null) {
      base = {};
    }
    for (key in newObj) {
      value = newObj[key];
      if (value != null) {
        base[key] = value;
      }
    }
    return base;
  };

  isEmpty = function(obj) {
    var prop, value;

    for (prop in obj) {
      value = obj[prop];
      if (obj.hasOwnProperty(prop)) {
        return false;
      }
    }
    return true;
  };

  Plot = (function() {
    function Plot(rootSelector) {
      this.rootSelector = rootSelector != null ? rootSelector : "body";
      this.root = d3.select(this.rootSelector);
      this.dim = {
        x: this.root.attr("width"),
        y: this.root.attr("height")
      };
      this.margin = {
        top: 20,
        right: 20,
        bottom: 40,
        left: 50
      };
      this.plotDim = {
        x: this.dim.x - this.margin.left - this.margin.right,
        y: this.dim.y - this.margin.top - this.margin.bottom
      };
      this.setScale();
      this.setTicks();
      this.setDefined();
      this.setAccessor({
        x: function(d) {
          return d[0];
        },
        y: function(d) {
          return d[1];
        }
      });
      this.setAxisLabel({
        x: "x",
        y: "y",
        title: ""
      });
      this.prepared = false;
      this.drawn = {};
      this.showGrid = true;
    }

    Plot.prototype.select = function(selector) {
      return d3.select("" + this.rootSelector + " " + selector);
    };

    Plot.prototype.logLog = function() {
      return this.setScale({
        x: "log",
        y: "log"
      });
    };

    Plot.prototype.semilogX = function() {
      return this.setScale({
        x: "log",
        y: "linear"
      });
    };

    Plot.prototype.semilogY = function() {
      return this.setScale({
        x: "linear",
        y: "log"
      });
    };

    Plot.prototype.setScale = function(type) {
      var alreadySet;

      if (type == null) {
        type = {
          x: "linear",
          y: "linear"
        };
      }
      this.scaleType = mergeObj(this.scaleType, type);
      alreadySet = this.scale != null;
      this.scale = {
        x: d3.scale[this.scaleType.x]().clamp(true).range([0, this.plotDim.x]),
        y: d3.scale[this.scaleType.y]().clamp(true).range([this.plotDim.y, 0])
      };
      if (alreadySet) {
        this.setLimits();
      }
      return this.refresh();
    };

    Plot.prototype.setLimits = function(limits) {
      if (limits == null) {
        limits = {
          x: null,
          y: null
        };
      }
      this.limits = mergeObj(this.limits, limits);
      if (this.limits.x != null) {
        this.scale.x.domain(this.limits.x);
      }
      if (this.limits.y != null) {
        this.scale.y.domain(this.limits.y);
      }
      return this.refresh();
    };

    Plot.prototype.setAccessor = function(accessor) {
      if (accessor == null) {
        accessor = {
          x: null,
          y: null
        };
      }
      this.accessor = mergeObj(this.accessor, accessor);
      if (!isEmpty(this.drawn)) {
        return this.refresh();
      }
    };

    Plot.prototype.setAxisLabel = function(label) {
      if (label == null) {
        label = {
          x: null,
          y: null,
          title: null
        };
      }
      this.label = mergeObj(this.label, label);
      if (this.prepared) {
        this.select(".title.axis-label").text(this.label.title);
        this.select(".x.axis-label").text(this.label.x);
        return this.select(".y.axis-label").text(this.label.y);
      }
    };

    Plot.prototype.setTicks = function(format) {
      if (format == null) {
        format = {
          x: null,
          y: null
        };
      }
      this.ticks = mergeObj(this.ticks, format);
      return this.refresh();
    };

    Plot.prototype.setDefined = function(defined) {
      this.defined = defined != null ? defined : null;
      return this.refresh;
    };

    Plot.prototype.makeAxis = function() {
      var make;

      make = function(orient, type, ticks) {
        var axis;

        axis = d3.svg.axis().scale(type).orient(orient);
        if (ticks != null) {
          axis.ticks.apply(axis, ticks);
        }
        return axis;
      };
      return {
        x: make("bottom", this.scale.x, this.ticks.x),
        y: make("left", this.scale.y, this.ticks.y)
      };
    };

    Plot.prototype.makeLine = function() {
      var accessX, accessY, defined, mapX, mapY, _ref, _ref1;

      this.line = d3.svg.line();
      _ref = this.scale, mapX = _ref.x, mapY = _ref.y;
      _ref1 = this.accessor, accessX = _ref1.x, accessY = _ref1.y;
      this.line.x(function(d) {
        return mapX(accessX(d));
      });
      this.line.y(function(d) {
        return mapY(accessY(d));
      });
      if (this.defined != null) {
        defined = this.defined;
        return this.line.defined(function(d) {
          return defined(accessX(d), accessY(d));
        });
      }
    };

    Plot.prototype.makeCanvas = function() {
      return this.canvas = describe(this.root.append("g"), {
        transform: "translate(" + this.margin.left + ", " + this.margin.top + ")"
      });
    };

    Plot.prototype.prepare = function() {
      if (this.prepared) {
        return;
      }
      this.makeCanvas();
      this.makeLine();
      this.drawGrid();
      this.drawAxis();
      this.drawAxisLabels();
      return this.prepared = true;
    };

    Plot.prototype.drawAxis = function() {
      var axis;

      axis = this.makeAxis();
      (describe(this.canvas.append("g"), {
        "class": "x axis",
        transform: "translate(0, " + this.plotDim.y + ")"
      })).call(axis.x);
      return (describe(this.canvas.append("g"), {
        "class": "y axis"
      })).call(axis.y);
    };

    Plot.prototype.drawGrid = function() {
      var axis;

      if (!this.showGrid) {
        return;
      }
      axis = this.makeAxis();
      axis.x.tickSize(-this.plotDim.y, 0, 0).tickFormat("");
      axis.y.tickSize(-this.plotDim.x, 0, 0).tickFormat("");
      (describe(this.canvas.append("g"), {
        "class": "x grid",
        transform: "translate(0, " + this.plotDim.y + ")"
      })).call(axis.x);
      return (describe(this.canvas.append("g"), {
        "class": "y grid"
      })).call(axis.y);
    };

    Plot.prototype.drawAxisLabels = function() {
      var rotated;

      describe(this.canvas.append("text").text(this.label.title), {
        x: this.plotDim.x / 2,
        y: -this.margin.top + 10,
        "text-anchor": "middle",
        "class": "title axis-label"
      });
      describe(this.canvas.append("text").text(this.label.x), {
        x: this.plotDim.x / 2,
        y: this.plotDim.y + this.margin.bottom - 5,
        "text-anchor": "middle",
        "class": "x axis-label"
      });
      rotated = this.canvas.append("g").attr("transform", "rotate(-90)");
      return describe(rotated.append("text").text(this.label.y), {
        x: -this.plotDim.y / 2,
        y: 10 - this.margin.left,
        "text-anchor": "middle",
        "class": "y axis-label"
      });
    };

    Plot.prototype.draw = function(id, data, label) {
      var pathData;

      if (label == null) {
        label = null;
      }
      this.prepare();
      pathData = this.line(data);
      if (this.drawn[id] != null) {
        this.select("path.line#" + id).transition().duration(500).attr("d", pathData);
      } else {
        describe(this.canvas.append("path"), {
          id: id,
          "class": "line",
          d: pathData
        });
      }
      return this.drawn[id] = {
        data: data,
        label: label
      };
    };

    Plot.prototype.refresh = function() {
      var id, value, _ref, _results;

      if (!this.prepared) {
        return;
      }
      this.canvas.remove();
      this.prepared = false;
      this.drawn = false;
      this.prepare();
      _ref = this.drawn;
      _results = [];
      for (id in _ref) {
        value = _ref[id];
        _results.push(draw(id, value.data, value.label));
      }
      return _results;
    };

    return Plot;

  })();

  dualPlot = new Plot("#dualPlot");

  dualPlot.logLog();

  dualPlot.setAxisLabel({
    x: "Frequency [Hz]",
    y: "Strain Amplitude [Hz^{-1/2}]",
    title: "Amplitude Spectral Density"
  });

  dualPlot.setTicks({
    x: [10, d3.format("n")],
    y: [10]
  });

  dualPlot.setLimits({
    x: [1, 1e4],
    y: [1e-25, 1e-16]
  });

  dualPlot.setDefined(function(x, y) {
    return x !== 0 && !isNaN(y);
  });

  handleError = function() {
    var args, error, func, json;

    error = arguments[0], json = arguments[1], func = arguments[2], args = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    if (error != null) {
      console.log(error);
    }
    if (json != null) {
      console.log(json.error);
    }
    return setTimeout((function() {
      return func.apply(null, args);
    }), 500);
  };

  frequencies = null;

  loadFrequencies = function() {
    return d3.json("asd/frequencies", function(error, json) {
      var i, _i, _ref;

      if ((error != null) || !json.success) {
        return handleError(error, json, loadFrequencies);
      }
      frequencies = json.data.frequencies;
      for (i = _i = 0, _ref = frequencies.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        frequencies[i] = +frequencies[i];
      }
      return refreshAmplitudes();
    });
  };

  refreshAmplitudes = function() {
    return d3.json("asd/latest", function(error, json) {
      var amplitudes, data, i, time, _ref;

      if ((error != null) || !json.success) {
        return handleError(error, json, refreshAmplitudes);
      }
      _ref = json.data, time = _ref.time, amplitudes = _ref.amplitudes;
      data = (function() {
        var _i, _ref1, _results;

        _results = [];
        for (i = _i = 0, _ref1 = frequencies.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
          _results.push([frequencies[i], +amplitudes[i]]);
        }
        return _results;
      })();
      dualPlot.setAxisLabel({
        title: "Time = " + time
      });
      dualPlot.draw("amplitude", data);
      return setTimeout(refreshAmplitudes, 1000);
    });
  };

  loadFrequencies();

}).call(this);

/*
//@ sourceMappingURL=asd-plot.map
*/
